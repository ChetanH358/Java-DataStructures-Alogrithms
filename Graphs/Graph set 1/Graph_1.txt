    Graph's are network of nodes
    Nodes are called as vertex (vertices)
    connection/path between them is called as edge's

    >>> Applications of Graph's
        1) Maps -> To find the shortest route which has less traffic ,To find the possible ways to rach the destination
        2) Social-network -> Friend network
        3) Delivery network -> Min Fuel, Min Time ,Maximum Order placements


    >> we can classify the edges of Graph into 2-Types
        1) Edge based on the direction
        2) Edge based on the weight

    1) Edge based on the direction 
        -> Uni-direction , where direction is specified
        -> Bi-direction/un-direction , in both direction / if no direction is given i.e un-direction we can go in both direction

    2) Edge based on the weight
        weight can be anything it can be time,distance and it can be zero , positive and negative as well
        -> weighted ,
        -> Un-weighted ,

    >>> Storing a Graph :
        Reprsentation of the graph
            1) Adjacency List  (Imp)
            2) Adjacency Matrix
            3) Edge List
            4) 2D Matrix (Implicit Graph)

    Adjacency List ->
    * List of List
        In Adjacency_dig picture  it is undirectional and unweighted graph
        vertices are 4 
        edges are 4
        we can make list of edges and store it in another list
        we can implement Adjacency list using -> hashmap or arraylist but most prefered is arraylist
        ArrayList<Edge> graph[v] 
        source is always fixed and destination is chnanging every time

        vertex-wise ->
        0 -> {0,2}
        1 -> {1,2} , {1,3}
        2 -> {2,0} , {2,3} , {2,3}
        3 -> {3,1} , {3,2}

        here 0,1,2,3 are the index of array-list and at each index we are storing the arraylist of connecting nodes

        structure of Edge is 
            static class Edge{
                int source;
                int destination;
                //constructor
            }

        ArrayList<Edge> graph[v] 
        graph[0].add(new Edge(0,2))
        graph[1].add(new Edge(1,2))
        graph[1].add(new Edge(1,3))
        graph[2].add(new Edge(2,0))
        graph[2].add(new Edge(2,3))

    --> Adjacency List ->
        *creating a graph
        In Adjacency_dig picture it is undirected weighted graph
        ArrayList<Edga> graph[]
        Edge = (source,destination,weight) // Edge class now contains

        0 -> {0,2,2}
        1 -> {1,2,10} , {1,3,0}
        2 -> {2,0,2} , {2,3,10} , {2,3,-1}
        3 -> {3,1,0} , {3,2,-1}

    --> Adjacency List ->
        *Adjacency Matrix 
        total number of vertices = 4 , so build a 4X4 Matrix
        [i,j]-> from diagram if node exist between i and j then we represent with 1 else 0
         
        form diagram :
        [0,0] -> No such edge exist between (0,0) so we write 0 into the Matrix
        [0,1] -> No such edge exist between (0,1) so we write 0 into the Matrix
        [0,2] -> edge exist between (0,2) so we write 1 into the Matrix
        [0,3] -> No such edge exist between (0,3) so we write 0 into the Matrix

        In arraylist didn't used extra space but in Matrix it is cosuming extra space
        but here we are Storing a information where edge didn't exist at all (it is extra information)
        space 0(v^2)
        neighbour 0(v)

    --> Edge List ->
        Edges = {{0,2},{1,2},{1,3},{2,3}}
        if we have edges as 4 then size of the linked list is also 4
        we can implement this by ArrayList or linked list

        upcoming topic minimum spanning tree (MST) ,in MST we get sorted edges
        if we have edge list with weighted information
        {0,2,2} {1,2,10} {1,3,0} {2,3,-1}
        sorting based on the weight -> {2,3,-1} {1,3,0} {0,2,2} {1,2,10} 
        while writing algorithm for MST we make use of Edge List but not ArrayList

    --> 2D Matrix(Implicit graph) ->
        graph which is already given in question itself
        flood fill algorithm -> uses Implicitgraph

        here starting point and ending point is given 
        we need to start form given postion until we reach destination
        Approach :
        we have 4 possible ways to move i.e 4 direction's for given (i,j)
        (i,j) -> right-side -> ( i , j+1 )
        (i,j) -> left-side  -> ( i , j-1 )
        (i,j) -> top        -> ( i-1 , j )
        (i,j) -> bottom     -> ( i+1 , j )



    Graph Traversals 
    Breadth First Search (BFS)
    Depth First Search (DFS)

        from the diagram at 0 we have 2 possiblites either 1 or 3 
        from 1 go to 3 at 3 we have 2 possiblites either 5 or 2 
        let us go to 2 from 2 we go to 0 here we notice 0 is already explored so we came back and the procedure continues

    1) Breadth First Search (BFS) ->
        rule : Go to immediate neighbour -> 
            if we start from 0 , we visit 1 , here before moving to 3 , we must go the neighbour's of 0 i.e 2
            now visit neighbour's of 2 i.e 4 once it is explored .now before going to 5 print all the neighbour's of 4 
            neighbour's of 4 are 2 & 3 which are already visited/explored in this way we search in Graph
            o/p -> 0 1 2 3 4 5 6

        BFS is Indirect level order Traversals
        In graph we use to do indirect level'search
        here also we use queue data structure and we need to create an array(boolean) which will keep track of 
        visited/unvisited nodes array size 7

            psudocode:
            Time Complexity : 0(V+E) -> Total vertices + Total Edges 
            crate queue and visited[]
            q.add(0)
            whie(!q.empty()){
                int curr = q.remove;
                if(vis[curr] == false){
                    1. print (curr)
                    2. vis [curr] = true
                    3. for(int i=0 to graph[curr].size()){
                        Edge e = graph[curr].get(i)
                        q.add(e.dest) //neighbour
                    }
                }
            }

        if our graph is splitted into two or if we have sub-graphs /disconnected component's ;
        create visited boolean array
        for(int i=0 to V){
            visit[i] == false
            i -> will become starting point 
        }
        //we create boolean array in main function
        // run a loop in main function

    2) Depth First Search (DFS) ->
        rule : keep going to the 1-st neighbour
        Time Complexity is O(V+E)
        here we go branch wise , when it is done with searching all the nodes of the first branch then only move to second branch
        we do this recursively and lastly we come back to the same node
        0 1 3 4 2 5 6 -> after printing 6 it starts returnig to its original position and finally 0 checks with 2 
        as 2 is already visited. by this we traverse the graph

        Note : Cycle (returning back to the same node) of noes exist in the graph so we create boolean visited[] to keep
        track of the nodes where as in trees it won't be recquired

        if we have splitted graph then also we can traverse the same logic will work 
        create visited boolean array
        for(int i=0 to V){
            visit[i] == false
            i -> will become starting point 
        }
        //we create boolean array in main function
        // run a loop in main function

        psudocode;
        void depth_first_search(graph,curr,vist[]){
            print(curr)
            vist[curr] = true;
            for(int i = 0 to graph[curr].size()){
                Edge e = graph[curr].get(i)
                depth_first_search(graph,e.destination,visited)
            }
        }

    >>>> All paths form source to target
    from the diagram :
        for given source and target print all the paths that exist from souce to target
        source: 0 and target:5

        as per diagram the possible path's are :
            0 -> 1 -> 3 -> 4 -> 5
            0 -> 1 -> 3 -> 5
            0 -> 2 -> 4 -> 3 -> 5
            0 -> 2 -> 4 -> 5

    we solve this problem using depth first search but here we are using modified DFS 
    because DFS print's the last node which we don't want ,we want upto the target node
        Here we maintian a track of our path

        psudocode for all paths :
            dfs(graph,visited[],current,String path,target){
                // this is the base condition of the recurssion to stop at target value 
                if(currnt == target){
                    print(path);
                    return;
                }
                for(int i=0 to graph[curr].size()){
                    Edge e = graph[curr].get(i)
                    if(visited[e.destination] == false){
                        // while going ahead to next node making visited true
                        visited[current] = true;

                        dfs(graph,visited[],e.destination,path+e.destination,target)
                        
                        // while returnig back making visited as false
                        visited[current] = false;
                    }
                }
            }
        
        Imp in (all paths question) QNA ->
            > we are making vist[true] -> | <- vist[false] , by doing this we are avoiding paramanent visited as true 
            > if we make it true paramanently it block the other path that we are searching for
            > if we didn't use visited[] than there is chance of getting struck in infinite loop

    Differences between DFS and modified DFS
        DFS ->
            no base condition
            at currnt level visited is getting true
            Time complexity -> O(V+E)
        PrintAll_paths ->
            we have base condition
            visited is getting true when it needs to call it's neighbour
            and while returning back visited is getting false]
            Time complexity -> O(V^V) <-- an exponential time complexity exist

    

    








        














